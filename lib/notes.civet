{ argv, stdout, exit } from node:process

type { ObjectId, Collection } from mongodb
type { ArgumentsCamelCase } from yargs
dayjs from dayjs
// @ts-expect-error - no types
cliMd from cli-markdown
* as C from colorette
{ z } from zod

type { Note, ProjectedNote, ProjectedNoteShortId } from ./db/schema.civet
{ createClient, notesCollection } from ./db/client.civet
{ type WithId, ObjectIdUtils } from ./db/utils.civet
{ Prompt } from ./prompt.civet
{ authInstance } from ./auth.civet
{ logger } from ./logger.civet
{ StringUtils } from ./utils/string.civet
{ DateUtils } from ./utils/date.civet
{ SortUtils } from ./utils/sort.civet
{ MarkdownUtils } from ./utils/markdown.civet
{
  BANNER
  OPTIONS_FILE
  EDIT_NOTE_TEMPLATE
  NOTE_VIEW_TEMPLATE
  PREVIEW_NOTE_TEMPLATE
} from ./const.civet

type NotizOptions
  editor: string
type printNotesPreviewOptions
  disableHeader?: boolean

export NOTE_FIELD_CHOICES := ['id', 'content', 'createdAt', 'expiresAt']
NOTE_SHORT_ID_PROJECTION := {
  _id: 0
  id: '$_id'
  shortId: { $substr: [{ $toString: '$_id' }, 21, 24] }
} as const
NOTE_FIND_PROJECTION := Object.assign {
  title: 1
  content: 1
  createdAt: 1
  expiresAt: 1
} as const, NOTE_SHORT_ID_PROJECTION

export class Notes
  private noteMetadataSchema := z.object
    title: z.string().min(2).max(64)
  private collection?: Collection<Note>
  private authNoop = false

  setup()
    @collection := unless 'auth' is in argv
      authInstance.readDbCredentials()
        |> await
        |> .uri
        |> createClient
        |> notesCollection
    @

  configure(args?: ArgumentsCamelCase<{ option?: 'editor' | (string & {}), value?: string }>) : Promise<void>
    unless args?.option and args?.value
      logger.error 'No option or value entered'
      exit 1
    currentOptions : NotizOptions := OPTIONS_FILE
      |> .json()
      |> await
    currentOptions[args.option as keyof NotizOptions] = args.value
    logger.success `Option "${args.option}" configured`
    await Bun.write OPTIONS_FILE, JSON.stringify currentOptions
    void 0

  printNotesPreview(notes: WithId<Note>[], args?: ArgumentsCamelCase<{ sort?: string, sortdesc?: string }>, options?: printNotesPreviewOptions) : Promise<void>
    length := notes.length
    if length is 0
      logger.clearPL()
      logger.success C.bold 'No notes found'
      exit 0
    markdown .= ''
    expired : ObjectId[] := []
    rows : WithId<Pick<Note, 'title' | 'createdAt' | 'expiresAt'>>[] .= []
    for { id, title, createdAt, expiresAt } of notes
      hasExpired := expiresAt and expiresAt < new Date()
      if hasExpired
        expired.push id
      else
        rows.push {
          id
          title
          createdAt
          expiresAt
        }
    unless expired.length is 0
      logger.clearPL()
      logger.warn 'Some notes have expired'
      await @collection!.deleteMany
        _id: { $in: expired }
    sort := args?.sort or args?.sortdesc
    isDescending := args?.sortdesc is sort
    if sort and sort is in NOTE_FIELD_CHOICES
      rows = (isDescending ? SortUtils.sortByDesc : SortUtils.sortBy) sort |> rows.sort
    unless options?.disableHeader
      logger.clearPL()
      logger.success C.bold 'Notes:'
    for { id, title, createdAt, expiresAt } of rows
      markdown += StringUtils.format(PREVIEW_NOTE_TEMPLATE, {
        title
        createdAt: C.dim `created at ${createdAt.toLocaleString()}`
        expiresAt: expiresAt ? C.dim `\n  - expires at ${expiresAt.toLocaleString()}` : ''
        shortId: C.redBright ObjectIdUtils.objectIdAlias id
      }) + '\n'
    markdown
      |> cliMd
      |> stdout.write
    void 0

  deleteByShortIds(shortIds?: string[]) : Promise<void>
    try
      unless shortIds?.length
        throw new Error 'No note ID entered'
      shouldDeleteAll := shortIds.length is 1 and shortIds.0 is 'all'
      if shouldDeleteAll
        await @collection!.deleteMany {}
        return
      map := await @mapShortNotesIds()
      idsToDelete : ObjectId[] := []
      for shortId of shortIds
        if map.has shortId
          idsToDelete.push map.get(shortId)!
      unless idsToDelete.length is 0
        await @collection!.deleteMany _id: { $in: idsToDelete }
      await @listAll()
    catch error
      logger.error (error as Error).message
      exit 1

  view(args?: ArgumentsCamelCase<{ id?: string[] }>) : Promise<void>
    try
      argsIds := args?.id
      unless argsIds?.length
        throw new Error 'No note ID entered'
      ids := []
      switch argsIds
        ['last']
          ids.push await @findLastEditedId()
        ['all']
          // no-op
        else
          map := await @mapShortNotesIds()
          for shortId of argsIds
            if map.has shortId
              ids.push map.get(shortId)
      notes := @collection!
        |> .find<WithId<Note>>
          { ...(ids.length and {
            _id: ids
          }) }
          projection: NOTE_FIND_PROJECTION
        |> .toArray()
        |> await
      if notes.length is 0
        throw new Error 'No note not found'
      content := notes
        |> .map (note) ->
          StringUtils.format NOTE_VIEW_TEMPLATE, {
            note.title
            note.content
            shortId: ObjectIdUtils.objectIdAlias note.id
            createdAt: C.dim `Created at ${note.createdAt.toLocaleString()}`
            expiresAt: note.expiresAt ? C.dim `Expires at ${note.expiresAt.toLocaleString()}` : ''
          }
        |> .join '\n---\n'
      content
        |> cliMd
        |> stdout.write
      void 0
    catch error
      logger.error (error as Error).message
      exit 1

  open(args?: ArgumentsCamelCase<{ id?: string; expires?: string }>) : Promise<void>
    try
      shortId := args?.id
      unless shortId
        throw new Error 'No note ID entered'
      { openOnEditor } := await import './editor.civet'
      id .= null
      switch args.id
        'last'
          id = await @findLastEditedId()
        else
          map := await @mapShortNotesIds()
          id = map.get shortId
      unless id
        throw new Error 'Note not found'
      current := @collection!
        |> .findOne<Pick<Note, 'title' | 'content' | 'expiresAt'>>
          { _id: id }
          projection: { title: 1, content: 1, expiresAt: 1 }
        |> await
      unless current
        throw new Error 'Note not found'
      content := StringUtils.format EDIT_NOTE_TEMPLATE, {
        current.title
        current.content
        current.expiresAt
      }
        |> openOnEditor { goToLine: '$' }
        |> await
      { metadata, inputContent } := MarkdownUtils.metadata content, @noteMetadataSchema
      unless inputContent
        throw new Error 'No content entered'
      if current.content is inputContent
        return
      expiresAt := if args?.expires then DateUtils.formatExpiresAt dayjs(), args.expires
      await @collection!.updateOne
        { _id: id }
        $set: {
          metadata.title
          content: inputContent
          updatedAt: new Date()
          ...(expiresAt instanceof Date and { expiresAt })
        }
      void 0
    catch error
      switch (error as Error).message
        /UNIQUE constraint/
          logger.error 'Note already exists'
        else
          logger.error (error as Error).message
      exit 1

  create(args?: ArgumentsCamelCase<{ expires?: string }>) : Promise<void>
    try
      createdAt := dayjs()
      expiresAt .= null
      { openOnEditor } := await import './editor.civet'
      initialTemplate := StringUtils.format EDIT_NOTE_TEMPLATE, {
        title: ''
        expiresAt: ''
        content: ''
      }
      content := initialTemplate
        |> openOnEditor { goToLine: 2 }
        |> await
      { metadata, inputContent } := MarkdownUtils.metadata content, @noteMetadataSchema
      unless inputContent
        throw new Error 'No content entered'
      expiresAt = if args?.expires then DateUtils.formatExpiresAt createdAt, args.expires
      await @collection!.insertOne {
        content: inputContent
        metadata.title
        createdAt: createdAt.toDate()
        updatedAt: createdAt.toDate()
        ...(expiresAt instanceof Date and { expiresAt })
      }
      await @listAll()
    catch error
      switch (error as Error).message
        /UNIQUE constraint/
          logger.error 'Note already exists'
        else
          logger.error (error as Error).message
      exit 1

  listAll(args?: ArgumentsCamelCase<{ sort?: string, sortdesc?: string }>) : Promise<void>
    try
      logger.info 'Loading notes...'
      notes := @collection!
        |> .find<ProjectedNote> {},
            projection: NOTE_FIND_PROJECTION
        |> .toArray()
        |> await
      await @printNotesPreview notes, args
    catch error
      logger.error 'Failed to load notes'
      logger.error (error as Error).message
      exit 1

  search(args?: ArgumentsCamelCase<{ content?: string, sort?: string, sortdesc?: string }>) : Promise<void>
    unless args?.content
      logger.error 'No search term entered'
      exit 1
    logger.info 'Searching notes...'
    try
      rows := @collection!
        |> .find<ProjectedNote>
          { content: { $regex: new RegExp args.content, 'i' } }
          projection: NOTE_FIND_PROJECTION
        |> .toArray()
        |> await
      await @printNotesPreview rows, args
    catch error
      logger.error 'Failed to search notes'
      logger.error (error as Error).message
      exit 1

  auth(): Promise<void>
    return if @authNoop
    stdout.write BANNER + '\n'
    logger.warn 'WARN!'
    stdout.write 'No database config found, asking for one...\n\n'
    prompts := new Prompt
    uri := prompts.secret 'URI of the database\n '
      |> await
      |> .trim()
    unless uri
      logger.error 'No URI entered'
      exit 1
    stdout.write '\n'
    try
      await authInstance.createDbCredentials uri
      @authNoop = true
      logger.success 'Database config saved...\n'
    catch error
      logger.error 'Failed to write database config'
      logger.error (error as Error).message
      exit 1
    void 0

  private findLastEditedId()
    lastEdited := @collection!
      |> .findOne {},
        projection: { _id: 1 }
        sort: { updatedAt: -1 }
      |> await
    unless lastEdited
      throw new Error 'No notes found'
    lastEdited._id

  private mapShortNotesIds()
    notes := @collection!
      |> .find<ProjectedNoteShortId> {},
          projection: NOTE_SHORT_ID_PROJECTION
      |> .toArray()
      |> await
    map := new Map<string, ObjectId>()
    for note of notes
      map.set note.shortId, note.id
    map
