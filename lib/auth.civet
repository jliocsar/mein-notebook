fs from node:fs
{ exit } from node:process

Cryptify from cryptify
* as C from colorette

{ logger } from ./logger.civet
{ NOTIZ_PATH, DATABASE_CONFIG_PATH, SECRET } from ./const.civet

export class Auth
  @(private crypt = new Cryptify DATABASE_CONFIG_PATH, SECRET, undefined, 'utf-8', true, true)

  readDbCredentials()
    try
      await @crypt.decrypt()
      file := Bun.file DATABASE_CONFIG_PATH
      data := await file.json<{ uri: string }>()
      await @crypt.encrypt()
      data
    catch error
      logger.error (error as Error).message
      logger.error `Did you run the ${C.cyanBright 'notiz auth'} command?`
      exit 1

  createDbCredentials(uri: string)
    try
      unless fs.existsSync NOTIZ_PATH
        fs.mkdirSync NOTIZ_PATH
      data := { uri } |> JSON.stringify
      await Bun.write DATABASE_CONFIG_PATH, data
      await @crypt.encrypt()
      { createClient, notesCollection } := await import './db/client.civet'
      uri
        |> createClient
        |> notesCollection
        |> .createIndex { content: 1, createdAt: 1, updatedAt: 1 }, { unique: true }
        |> await
      void 0
    catch error
      fs.rmSync NOTIZ_PATH, recursive: true
      throw error

export authInstance := new Auth()
