{ argv, stdout, stderr, exit } from node:process
fs from node:fs/promises
path from node:path

type { ArgumentsCamelCase } from yargs
Table from cli-table3
yargs from yargs/yargs
dayjs from dayjs
* as colorette from colorette
{ Spinner } from @topcli/spinner
{ hideBin } from yargs/helpers
{ eq, inArray } from drizzle-orm

type { TDbCredentials } from ./drizzle.config
{ createClient } from ./lib/db/client.civet
{ notes, SelectNote } from ./lib/db/schema

process.on 'SIGINT', ->
  stdout.write colorette.redBright 'Aborting...\n'
  exit 0

MEINE_NOTEBOOK_PATH := '.meine-notebook'
DATABASE_CONFIG_PATH := path.join MEINE_NOTEBOOK_PATH, 'database'
BANNER := colorette.magenta
  `
            .   *#          ..   
    :--     -@*  @@  .:     =---  
    =-=.    +@#  @@  =@+     ::   
            =@# :@%  #@= +.       
            @@#%@@+%@# -@+       
        --   +@@@@@@@@@%@#        
        #@*. =@@@@@@@@@@#         
        *@@@@@@@@@@@@@@          
          =#@@@@@@@@@@=          
    ..:     -%@@@@@@@*           
    .:-      .@@@@@@.   .-+      
              .@@#*#@             
          ++=*##@@@*##=:         
  :.:--#%%%%%%%%%%%%%%%%%#*--.-: 

           ${colorette.italic colorette.white 'mein-notebook'}
  `

choices := ['id', 'content', 'createdAt', 'expiresAt']
noop : boolean .= false

auth := : Promise<void> ->
  return if noop
  stdout.write BANNER + '\n'
  stdout.write colorette.yellowBright 'WARN!\n'
  stdout.write 'No database config found, asking for one...\n\n'

  stdout.write colorette.dim 'URL of the database:\n'
  url := readStdin() |> await
  stdout.write colorette.dim '\nDatabase auth token:\n'
  authToken := readStdin() |> await
  spinner := new Spinner
    |> .start colorette.cyanBright 'Writing database auth...'

  try
    unless await fs.exists MEINE_NOTEBOOK_PATH
      await fs.mkdir MEINE_NOTEBOOK_PATH
    data := { url, authToken } as TDbCredentials |> JSON.stringify
    await Bun.write DATABASE_CONFIG_PATH, data
    noop = true
    spinner.succeed '\nDatabase authenticated...\n'
  catch error
    spinner.failed '\nFailed to write database config\n'
    stderr.write (error as Error).message + '\n'
    await fs.rm MEINE_NOTEBOOK_PATH, recursive: true
    exit 1

if not await fs.exists DATABASE_CONFIG_PATH
  await auth()

db := unless 'auth' is in argv
  createClient() |> await |> .db

readStdin := ->
  for await chunk of Bun.stdin.stream()
    if chunk
      return chunk |> Buffer.from |> .toString().trim()
  null

sortBy := (choice: number) ->
  (orig: any, comp: any) ->
    unless orig[choice] and comp[choice] then 0
    else
      orig[choice]! > comp[choice]! ? 1 : -1

sortByDesc := (choice: number) ->
  (orig: any, comp: any) ->
    unless orig[choice] and comp[choice] then 0
    else
      orig[choice]! < comp[choice]! ? 1 : -1

listAll := (args?: ArgumentsCamelCase<{ sort?: string, sortdesc?: string }>) ->
  spinner := new Spinner |> .start 'Loading notes...'
  try
    allNotes := db!.select() |> .from notes |> await
    spinner.succeed colorette.bold 'Notes:'
    expired : number[] := []
    rows .= []
    for { id, content, createdAt, expiresAt } of allNotes
      hasExpired := expiresAt and expiresAt < new Date()
      if hasExpired
        expired.push id
      else
        rows.push {
          id
          content
          createdAt: createdAt.toLocaleString()
          expiresAt: expiresAt?.toLocaleString()
        }
    unless expired.length is 0
      stdout.write colorette.cyanBright 'Some notes have expired\n'
      await deleteByIds expired
    sort := args?.sort or args?.sortdesc
    isDescending := args?.sortdesc is sort
    if sort and sort is in choices
      choice := choices.indexOf sort
      rows = (isDescending ? sortByDesc : sortBy) choice |> rows.sort
    rows
      |> .map (row) ->
        `
${colorette.bold colorette.greenBright 'ID' }: ${colorette.bold row.id} ${colorette.dim '|'} ðŸ“… ${row.createdAt} ${row.expiresAt ? `${colorette.dim '|'} ðŸ•’ ${row.expiresAt}` : ''}

${row.content}
`
      |> .join colorette.dim '_______________________________________________________________\n'
      |> stdout.write
  catch error
    spinner.failed 'Failed to load notes'
    stderr.write (error as Error).message + '\n'
    exit 1
  void 0

deleteByIds := (ids?: (string | number)[]) ->
  unless ids
    stderr.write 'No note ID entered\n'
    exit 1
  try
    shouldDeleteAll := ids.length is 1
      and ids.0 is 'all'
    db!.delete notes
      |> .where
        shouldDeleteAll
          ? undefined
          : inArray notes.id, ids.map Number
      |> .returning()
      |> await
    unless shouldDeleteAll
      listAll()
  catch error
    stderr.write (error as Error).message + '\n'
    exit 1
  void 0

update := (id?: number) ->
  unless id
    stderr.write 'No note ID entered\n'
    exit 1
  stdout.write 'Enter note update: \n'
  content := readStdin() |> await
  unless content
    stderr.write 'No note entered\n'
    exit 1
  try
    db!.update notes
      |> .set { content }
      |> .where eq notes.id, id
      |> .returning()
      |> await
    listAll()
  catch error
    stderr.write (error as Error).message + '\n'
    exit 1
  void 0

create := ->
  stdout.write colorette.bold 'Enter note: \n'
  content := readStdin() |> await
  stdout.write colorette.bold '\nExpires at: \n'
  createdAt := dayjs()
  expiresAt := readStdin()
    |> await |> (val) ->
      unless val
        return null
      [time, rawPeriod] := val!.split ' '
      unless rawPeriod
        return null
      period := rawPeriod.replace /s$/, ''
      createdAt.add
        Number time
        period as dayjs.ManipulateType
  unless content  
    stderr.write 'No note entered\n'
    exit 1
  try
    db!.insert notes
      |> .values {
          content,
          createdAt: createdAt.toDate(),
          expiresAt: expiresAt?.toDate()
        }
      |> await
    listAll()
  catch error
    stderr.write (error as Error).message + '\n'
    exit 1
  void 0

yargs hideBin argv
  |> .scriptName 'mein-notebook'
  |> .usage '$0 <cmd> [options]'
  |> .command 'auth', 'Updates the database access configuration', ->, auth
  |> .command 'list', 'List all notes',
    (yargs) -> yargs
      |> .option 'sort', {
          choices
          describe: 'Field to sort ascending by'
          type: 'string'
        }
      |> .option 'sortdesc', {
          choices
          describe: 'Field to sort descending by'
          type: 'string'
        }
    listAll
  |> .command 'delete <id...>', 'Delete note(s) by ID(s) ("all" to delete all)',
    (yargs) -> yargs
      |> .positional 'id', { describe: 'Note id', type: 'string', array: true }
    (args) -> deleteByIds args.id
  |> .command 'update <id>', 'Update a note',
    (yargs) -> yargs
      |> .positional 'id', { describe: 'Note id', type: 'number' }
    (args) -> update args.id
  |> .command 'create', 'Create a note', ->, create
  |> .demandCommand 1
  |> .recommendCommands()
  |> .argv
