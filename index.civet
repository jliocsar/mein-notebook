fs from node:fs
path from node:path
{ argv, stdout, stderr, exit } from node:process

type { ArgumentsCamelCase } from yargs
yargs from yargs/yargs
dayjs from dayjs
// @ts-expect-error - no types
cliMd from cli-markdown
* as C from colorette
{ hideBin } from yargs/helpers
{ eq, inArray, like } from drizzle-orm

{ upgrade } from ./upgrade.civet
{ createClient } from ./lib/db/client.civet
{ Auth } from ./lib/auth.civet
{ openOnEditor } from ./lib/editor.civet
{ type SelectNote, notes } from ./lib/db/schema
{
  BANNER
  DATABASE_CONFIG_PATH
  OPTIONS_FILE
  SECRET
} from ./lib/const.civet

type NotizOptions
  editor: string

printDimmed := (message: string) -> stdout.write C.dim message + '\n'
printSuccess := (message: string) -> stdout.write `${C.bold C.greenBright '✓'} ${message}\n`
printInfo := (message: string) -> stdout.write `${C.bold C.blueBright '!'} ${message}\n`
printWaiting := (message: string) -> stdout.write `⏳ ${message}\n`
printWarning := (message: string) -> stdout.write `${C.bold C.yellowBright '⚠'} ${message}\n`
printError := (message: string) -> stderr.write `${C.bold C.redBright '❌'} ${message}\n`

unless SECRET
  printError `No env. variable ${C.blueBright 'NOTIZ_SECRET'} detected!`
  stdout.write 'Set it to a secret string to encrypt your database auth\n'
  exit 1

choices := ['id', 'content', 'createdAt', 'expiresAt']
noop : boolean .= false

process.on 'SIGINT', ->
  printError 'Aborting...'
  exit 0

auth := : Promise<void> ->
  return if noop
  stdout.write BANNER + '\n'
  printWarning 'WARN!'
  stdout.write 'No database config found, asking for one...\n\n'
  printDimmed 'URL of the database:'
  url := readStdin() |> await
  unless url
    printError 'No URL entered'
    exit 1
  printDimmed '\nDatabase auth token:'
  authToken := readStdin() |> await
  unless authToken
    printError '\nNo auth token entered'
    exit 1

  try
    instance := new Auth url, authToken
    await instance.createDbCredentials()
    noop = true
    printSuccess '\nDatabase config saved...\n'
    printWaiting 'Applying database migration...'
    await import './lib/db/migrate.civet'
  catch error
    printError '\nFailed to write database config\n'
    printError (error as Error).message
    exit 1

if not fs.existsSync DATABASE_CONFIG_PATH
  await auth()

db := unless 'auth' is in argv
  createClient() |> await |> .db

readStdin := ->
  for await chunk of Bun.stdin.stream()
    if chunk
      return chunk |> Buffer.from |> .toString().trim()
  void 0

sortBy := (field: string) ->
  (orig: any, comp: any) ->
    unless orig[field] and comp[field]
      0
    else
      orig[field]! > comp[field]! ? 1 : -1

sortByDesc := (field: string) ->
  (orig: any, comp: any) ->
    unless orig[field] and comp[field]
      0
    else
      orig[field]! < comp[field]! ? 1 : -1

formatExpiresAt := (createdAt: dayjs.Dayjs, expires: string) ->
  [time, rawPeriod] := expires
    |> .split /^(\d+)\s*(\w+)$/
    |> .filter Boolean
  unless rawPeriod
    return null
  period := rawPeriod.replace /s$/, ''
  createdAt
    |> .add
      Number time
      period as dayjs.ManipulateType
    |> .toDate()

configure := (args?: ArgumentsCamelCase<{ option?: 'editor' | (string & {}), value?: string }>) ->
  unless args?.option and args?.value
    printError 'No option or value entered'
    exit 1
  currentOptions : NotizOptions := OPTIONS_FILE
    |> .json()
    |> await
  currentOptions[args.option as keyof NotizOptions] = args.value
  printSuccess `Option "${args.option}" configured`
  await Bun.write OPTIONS_FILE, JSON.stringify currentOptions
  void 0

search := (args?: ArgumentsCamelCase<{ content?: string, sort?: string, sortdesc?: string }>) ->
  unless args?.content
    printError 'No search term entered'
    exit 1
  printInfo 'Searching notes...'
  try
    rows := db!.select()
      |> .from notes
      |> .where like notes.content, `%${args.content}%`
      |> await
    printNotes rows, args
  catch error
    printError 'Failed to search notes'
    printError (error as Error).message
    exit 1
  void 0

type PrintNotesOptions
  disableHeader?: boolean

printNotes := (notesList: SelectNote[], args?: ArgumentsCamelCase<{ sort?: string, sortdesc?: string }>, options?: PrintNotesOptions) ->
  length := notesList.length
  if length is 0
    printSuccess C.bold 'No notes found'
    exit 0
  markdown .= ''
  expired : number[] := []
  rows : { id: number, content: string, createdAt: string, expiresAt: string }[] .= []
  for { id, content, createdAt, expiresAt } of notesList
    hasExpired := expiresAt and expiresAt < new Date()
    if hasExpired
      expired.push id
    else
      rows.push {
        id
        content
        createdAt: createdAt.toLocaleString()
        expiresAt: expiresAt?.toLocaleString() or ''
      }
  unless expired.length is 0
    printWarning 'Some notes have expired'
    await deleteByIds expired
  sort := args?.sort or args?.sortdesc
  isDescending := args?.sortdesc is sort
  if sort and sort is in choices
    rows = (isDescending ? sortByDesc : sortBy) sort |> rows.sort
  unless options?.disableHeader
    stdout.write C.dim '-\n'
    printSuccess C.bold 'Notes:'
  for { id, content, createdAt, expiresAt }, index of rows
    markdown += `# ${id}

${content}

${C.dim 'Created at ' + createdAt.toLocaleString()}
${expiresAt ? C.dim `- Expires at ${expiresAt}` : ''}
${index < length - 1 ? '\n---\n' : ''}`
  markdown
    |> cliMd
    |> stdout.write
  void 0

listAll := (args?: ArgumentsCamelCase<{ sort?: string, sortdesc?: string }>) ->
  try
    printInfo 'Loading notes...'
    allNotes := db!.select()
      |> .from notes
      |> await
    printNotes allNotes, args
  catch error
    printError 'Failed to load notes'
    printError (error as Error).message
    exit 1
  void 0

view := (args?: ArgumentsCamelCase<{ id?: number, contentOnly?: boolean }>) ->
  id := args?.id
  unless id
    printError 'No note ID entered'
    exit 1
  unless Number.isInteger id
    printError 'Note ID must be an integer'
    exit 1
  try
    notesView := db!.select()
      |> .from notes
      |> .where eq notes.id, id
      |> await
      |> &.0
    unless notesView
      printError 'Note not found'
      exit 1
    if args?.contentOnly
      stdout.write notesView.content
    else
      printNotes [notesView], args, { +disableHeader }
  catch error
    printError 'Failed to view note'
    printError (error as Error).message
    exit 1
  void 0

deleteByIds := (ids?: (string | number)[]) ->
  unless ids?.length
    printError 'No note ID entered'
    exit 1
  unless ids.every Number.isInteger
    printError 'Every note ID must be an integer'
    exit 1
  try
    shouldDeleteAll := ids.length is 1
      and ids.0 is 'all'
    db!.delete notes
      |> .where
        shouldDeleteAll
          ? undefined
          : inArray notes.id, ids.map Number
      |> .returning()
      |> await
    unless shouldDeleteAll
      listAll()
  catch error
    printError (error as Error).message
    exit 1
  void 0

update := (args?: ArgumentsCamelCase<{ id?: number; expires?: string }>) ->
  id := args?.id
  unless id
    printError 'No note ID entered'
    exit 1
  unless Number.isInteger id
    printError 'Note ID must be an integer'
    exit 1
  current := db!.select { notes.content }
    |> .from notes
    |> .where eq notes.id, id
    |> await
    |> &.0
  content := await openOnEditor current.content
  unless content
    printError 'No note entered'
    exit 1
  try
    expiresAt := if args?.expires then formatExpiresAt dayjs(), args.expires
    db!.update notes
      |> .set {
          content
          ...(expiresAt instanceof Date and { expiresAt })
        }
      |> .where eq notes.id, id
      |> .returning()
      |> await
    listAll()
  catch error
    switch (error as Error).message
      /UNIQUE constraint/
        printError 'Note already exists'
      else
        printError (error as Error).message
    exit 1
  void 0

create := (args?: ArgumentsCamelCase<{ note?: string[]; expires?: string }>) ->
  createdAt := dayjs()
  expiresAt .= null
  content := switch args?.note
    []
      await openOnEditor()
    [...items]
      items.join ' '
  unless content  
    printError 'No note entered'
    exit 1
  try
    expiresAt = if args?.expires then formatExpiresAt createdAt, args.expires
    db!.insert notes
      |> .values {
          content,
          createdAt: createdAt.toDate(),
          ...(expiresAt instanceof Date and { expiresAt })
        }
      |> await
    listAll()
  catch error
    switch (error as Error).message
      /UNIQUE constraint/
        printError 'Note already exists'
      else
        printError (error as Error).message
    exit 1
  void 0

yargs hideBin argv
  |> .scriptName 'notiz'
  |> .usage '$0 <cmd> [options]'
  |> .version
    path.resolve import.meta.dir, 'package.json'
      |> Bun.file
      |> .json()
      |> await
      |> .version
  |> .command 'upgrade', 'Upgrades the command to its latest version', ->, upgrade
  |> .command 'auth', 'Updates the database access configuration', ->, auth
  |> .command 'configure <option> <value>', 'Configures the CLI options',
    (yargs) -> yargs
      |> .positional 'option', {
          choices: ['editor']
          describe: 'Option to configure'
          type: 'string'
        }
      |> .positional 'value', { describe: 'Value to set the option to', type: 'string' }
    configure
  |> .command 'view <id>', "View a note",
    (yargs) -> yargs
      |> .positional 'id', { describe: 'Note id', type: 'number' }
      |> .option 'content-only', { describe: 'Only view the note content', type: 'boolean', alias: 'c' }
    view
  |> .command 'search <content>', 'Search notes by content',
    (yargs) -> yargs
      |> .positional 'content', { describe: 'Note content', type: 'string' }
      |> .option 'sort', {
          choices
          describe: 'Field to sort ascending by'
          type: 'string'
        }
      |> .option 'sortdesc', {
          choices
          describe: 'Field to sort descending by'
          type: 'string'
        }
    search
  |> .command 'list', 'List all notes',
    (yargs) -> yargs
      |> .option 'sort', {
          choices
          describe: 'Field to sort ascending by'
          type: 'string'
        }
      |> .option 'sortdesc', {
          choices
          describe: 'Field to sort descending by'
          type: 'string'
        }
    listAll
  |> .command 'delete <id...>', 'Delete note(s) by ID(s) ("all" to delete all)',
    (yargs) -> yargs
      |> .positional 'id', { describe: 'Note id', type: 'string', +array }
    (args) -> deleteByIds args.id
  |> .command 'update <id>', 'Update a note',
    (yargs) -> yargs
      |> .positional 'id', { describe: 'Note id', type: 'number' }
      |> .option 'expires', { describe: 'Note expiration time', type: 'string', alias: 'e', -required }
    update
  |> .command 'create [note...]', 'Create a note',
    (yargs) -> yargs
      |> .positional 'note', { describe: 'Note content', type: 'string', -required, +array }
      |> .option 'expires', { describe: 'Note expiration time', type: 'string', alias: 'e', -required }
    create
  |> .demandCommand 1
  |> .recommendCommands()
  |> .argv
