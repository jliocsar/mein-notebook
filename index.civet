fs from node:fs
path from node:path
{ argv, stdout, exit } from node:process

yargs from yargs/yargs
* as C from colorette
{ hideBin } from yargs/helpers

{ logger } from ./lib/logger.civet
{ DATABASE_CONFIG_PATH, SECRET } from ./lib/const.civet
{ Notes, NOTE_FIELD_CHOICES } from ./lib/notes.civet

unless SECRET
  logger.error `No env. variable ${C.blueBright 'NOTIZ_SECRET'} detected!`
  stdout.write 'Set it to a secret string to encrypt your database auth\n'
  exit 1

process.on 'SIGINT', ->
  logger.error 'Aborting...'
  exit 0

$ := new Notes()
  |> .setup()
  |> await

unless fs.existsSync DATABASE_CONFIG_PATH
  await $.auth()

yargs hideBin argv
  |> .scriptName 'notiz'
  |> .usage '$0 <cmd> [options]'
  |> .version
    path.resolve import.meta.dir, 'package.json'
      |> Bun.file
      |> .json()
      |> await
      |> .version
  |> .command 'upgrade', 'Upgrades the command to its latest version',
    ->, -> 
      { upgrade } := await import './upgrade.civet'
      upgrade()
      exit 0
  |> .command 'auth', 'Updates the database access configuration',
    ->, ->
      await $.auth()
      exit 0
  |> .command 'configure <option> <value>', 'Configures the CLI options',
    (yargs) -> yargs
      |> .positional 'option', {
          choices: ['editor']
          describe: 'Option to configure'
          type: 'string'
        }
      |> .positional 'value', { describe: 'Value to set the option to', type: 'string' }
    (args) ->
      args |> $.configure |> await
      exit 0
  |> .command 'view <id>', "View a note",
    (yargs) -> yargs
      |> .positional 'id', { describe: 'Note id', type: 'string' }
      |> .option 'content-only', { describe: 'Only view the note content', type: 'boolean', alias: 'c' }
    (args) ->
      args |> $.view |> await
      exit 0
  |> .command 'search <content>', 'Search notes by content',
    (yargs) -> yargs
      |> .positional 'content', { describe: 'Note content', type: 'string' }
      |> .option 'sort', {
          choices: NOTE_FIELD_CHOICES
          describe: 'Field to sort ascending by'
          type: 'string'
        }
      |> .option 'sortdesc', {
          choices: NOTE_FIELD_CHOICES
          describe: 'Field to sort descending by'
          type: 'string'
        }
    (args) ->
      args |> $.search |> await
      exit 0
  |> .command 'list', 'List all notes',
    (yargs) -> yargs
      |> .option 'sort', {
          choices: NOTE_FIELD_CHOICES
          describe: 'Field to sort ascending by'
          type: 'string'
        }
      |> .option 'sortdesc', {
          choices: NOTE_FIELD_CHOICES
          describe: 'Field to sort descending by'
          type: 'string'
        }
    (args) ->
      args |> $.listAll |> await
      exit 0
  |> .command 'delete <id...>', 'Delete note(s) by ID(s) ("all" to delete all)',
    (yargs) -> yargs
      |> .positional 'id', { describe: 'Note id', type: 'string', +array }
    (args) ->
      args.id |> $.deleteByShortIds |> await
      exit 0
  |> .command 'update <id>', 'Update a note',
    (yargs) -> yargs
      |> .positional 'id', { describe: 'Note id', type: 'string' }
      |> .option 'expires', { describe: 'Note expiration time', type: 'string', alias: 'e', -required }
    (args) ->
      args |> $.update |> await
      exit 0
  |> .command 'create [note...]', 'Create a note',
    (yargs) -> yargs
      |> .positional 'note', { describe: 'Note content', type: 'string', -required, +array }
      |> .option 'expires', { describe: 'Note expiration time', type: 'string', alias: 'e', -required }
    (args) ->
      args |> $.create |> await
      exit 0
  |> .demandCommand 1
  |> .recommendCommands()
  |> .argv
